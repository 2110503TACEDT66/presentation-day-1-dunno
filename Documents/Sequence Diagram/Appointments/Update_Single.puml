@startuml Update Appointment

header Sample VacQ Sequence Diagram
footer Page %page% of %lastpage%
title "Update Appointment"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:appointments/:id" as routerAppointments
participant "<<controllers>>\n:updateAppointment" as controllersUpdateAppointment
participant "<<model>>\n:Appointment" as modelAppointment
database "<<MongoDB>>\n:appointments" as AppointmentsDatabase

client->server ++:req.put('/api/v1/appointments/:id')
server->routerAppointments ++:app.put('/api/v1/appointments/:id', updateAppointment)
routerAppointments -> controllersUpdateAppointment ++:updateAppointment(req, res, next)
activate controllersUpdateAppointment

controllersUpdateAppointment->modelAppointment ++:Appointment.findById(req.params.id)
activate modelAppointment
modelAppointment --> controllersUpdateAppointment --:appointment

alt "Appointment not found"
    controllersUpdateAppointment->client --:res.status(404).json({ success: false, message: "No appointment with the id" })
else "Appointment found"
    alt "User unauthorized to update"
        controllersUpdateAppointment->client --:res.status(401).json({ success: false, message: "User is not authorized to update this" })
    else "User authorized to update"
        controllersUpdateAppointment->modelAppointment ++:Appointment.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })
        modelAppointment -> AppointmentsDatabase: AppointmentSchema
        AppointmentsDatabase --> modelAppointment --:appointment
        modelAppointment --> controllersUpdateAppointment --:updatedAppointment
        controllersUpdateAppointment->client --:res.status(200).json({ success: true, data: updatedAppointment })
    end
end

deactivate modelAppointment
deactivate controllersUpdateAppointment
@enduml
